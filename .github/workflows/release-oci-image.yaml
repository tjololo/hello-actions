name: Build OCI Artifact

on:
  push:
    branches:
      - main
    paths:
      - releases/*/**
  release:
    types: 
      - created

env:
  RELEASE_TAG_PREFIX: 'oci-'
  OCI_ROOT_DIR: 'releases'

permissions:
  id-token: write
  contents: read

jobs:
  build-latest:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
      - name: Build and push artifacts with commit sha tag
        env:
          REGISTRY: oci-registry.azurecr.io
        run: |
          echo '### Check if there are any changes in ./${{ env.OCI_ROOT_DIR }}/ folder'
          OCI_FILES=$(git diff-tree --no-commit-id --name-only -r HEAD | grep '${{ env.OCI_ROOT_DIR }}/' || true)
          if [ -z "${OCI_FILES}" ]; then
            echo "No artifacts to process."
            exit 0
          fi

          # Extract unique folder names directly under ./manifests/infra/
          ARTIFACTS=$(echo "${OCI_FILES}" | awk -F'/' '{print $2}' | sort -u)
          for artifact in $ARTIFACTS;do
            echo "Processing artifact source: ./${{env.OCI_ROOT_DIR}}/$artifact"
            echo "Pushing artifact to OCI registry: oci://${REGISTRY}/oci/${artifact}:$(git rev-parse --short HEAD)"
            echo "Pushing artifact to OCI registry: oci://${REGISTRY}/oci/${artifact}:latest"
          done
  tag-release:
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'created' && startsWith(github.event.release.tag_name, github.env.RELEASE_TAG_PREFIX)
    steps:
      - name: Checkout Code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Extract release name and version
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        id: extract-release
        with:
          script: |
            const releaseRegex = /${{ env.RELEASE_TAG_PREFIX }}(.*?)-v(\d+\.\d+\.\d+)/;
            const match = context.payload.release.tag_name.match(releaseRegex);
            if (match) {
              const releaseName = match[1];
              const releaseVersion = match[2];
              core.setOutput('releaseName', releaseName);
              core.setOutput('releaseVersion', releaseVersion);
              // Check if the release name corresponds to a folder in ./flux/
              const releaseFolder = `./flux/${releaseName}`;
              const fs = require('fs');
              if (!fs.existsSync(releaseFolder)) {
                core.setFailed(`Release folder does not exist: ${releaseFolder}`);
                return;
              }
            } else {
              core.setFailed(`Release tag name does not match expected format: ${context.payload.release.tag_name}`);
              return;
            }
      - name: Add release tag to artifacts
        env:
          REGISTRY: oci-registry.azurecr.io
        run: |
            echo "Processing artifact source: ./${{env.OCI_ROOT_DIR}}/${{ steps.extract-release.outputs.releaseName }}"
            echo "Pushing artifact to OCI registry: oci://${REGISTRY}/oci/${{ steps.extract-release.outputs.releaseName }}:${{ steps.extract-release.outputs.releaseVersion }}"
